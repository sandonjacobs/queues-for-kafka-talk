/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.confluent.devrel;

import io.confluent.devrel.consumer.EventConsumer;
import io.confluent.devrel.producer.EventProducer;
import io.confluent.devrel.proto.Event;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.Instant;
import java.util.UUID;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class App {
    private static final Logger logger = LoggerFactory.getLogger(App.class);
    
    // Kafka configuration
    private static final String BOOTSTRAP_SERVERS = "localhost:9092";
    private static final String SCHEMA_REGISTRY_URL = "http://localhost:8081";
    private static final String TOPIC = "events";
    private static final String CONSUMER_GROUP = "event-processor";
    
    public static void main(String[] args) {
        logger.info("Starting Kafka Protobuf Serialization Example");
        
        // Start the consumer in a separate thread
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        
        try (EventProducer producer = new EventProducer(BOOTSTRAP_SERVERS, SCHEMA_REGISTRY_URL, TOPIC)) {
            // Create and start the consumer
            EventConsumer consumer = new EventConsumer(
                    BOOTSTRAP_SERVERS, 
                    SCHEMA_REGISTRY_URL,
                    CONSUMER_GROUP,
                    TOPIC, 
                    (key, event) -> {
                        logger.info("Processing event: id={}, type={}, content={}", 
                                event.getId(), event.getType(), event.getContent());
                    }
            );
            
            executorService.submit(consumer);
            
            // Produce some sample events
            for (int i = 0; i < 5; i++) {
                String id = UUID.randomUUID().toString();
                
                Event event = Event.newBuilder()
                        .setId(id)
                        .setContent("Sample message " + i)
                        .setTimestamp(Instant.now().toEpochMilli())
                        .setType(Event.EventType.CREATE)
                        .build();
                
                producer.sendEvent(id, event);
                
                try {
                    // Wait a bit between sends
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
            
            // Allow some time for processing
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            
            // Shutdown the consumer
            consumer.shutdown();
            executorService.shutdown();
            try {
                if (!executorService.awaitTermination(10, TimeUnit.SECONDS)) {
                    executorService.shutdownNow();
                }
            } catch (InterruptedException e) {
                executorService.shutdownNow();
                Thread.currentThread().interrupt();
            }
            
        } catch (Exception e) {
            logger.error("Error in Kafka example: {}", e.getMessage(), e);
        }
        
        logger.info("Kafka Protobuf Serialization Example completed");
    }
}
